{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setmyStyle","btntext","setBtnText","className","style","id","type","onClick","Navbar","props","mode","to","title","aboutText","toggleMode","class","htmlFor","defaultProps","TextForm","text","setText","heading","borderRadius","borderColor","value","onChange","event","target","newText","toUpperCase","showAlert","toLowerCase","split","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.25f336f5.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\nexport default function About() {\n    const [myStyle, setmyStyle] = useState({\n        color: 'black',\n        backgroundColor: 'white'\n    })\n    const toggleStyle = () => {\n        if(myStyle.color === 'black') {\n            setmyStyle({\n                color: 'white',\n                backgroundColor: 'black'\n            })\n            setBtnText(\"Enable Light Mode\")\n        }\n        else{\n            setmyStyle({\n                color: 'black',\n                backgroundColor: 'white'\n            })\n            setBtnText(\"Enable Dark Mode\")\n        }\n    }\n    const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\n    return (\n        <div className=\"container\" style={myStyle}>\n        <h2 className=\"text-center\">About Us</h2>\n            <div className=\"accordion\" id=\"accordionExample\">\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                            Accordion Item #1\n                        </button>\n                    </h2>\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle} >\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n                            Accordion Item #2\n                        </button>\n                    </h2>\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle} >\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n                            Accordion Item #3\n                        </button>\n                    </h2>\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle} >\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary my-3\">{btntext}</button>\n        </div>\n    )\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          {props.title}\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\n                Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/about\">\n                {props.aboutText}\n              </Link>\n            </li>\n          </ul>\n          {/* <form className=\"d-flex\">\n            <input\n              className=\"form-control me-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button className=\"btn btn-outline-success\" type=\"submit\">\n              Search\n            </button>\n          </form> */}\n          <div\n            className={`form-check form-switch text-${\n              props.mode === \"light\" ? \"dark\" : \"light\"\n            }`}\n          >\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              id=\"flexSwitchCheckDefault\"\n              onClick={props.toggleMode}\n            />\n            <label class=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\n              Enable DarkMode\n            </label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n  aboutText: PropTypes.string.isRequired,\n};\nNavbar.defaultProps = { aboutText: \"About Us\", title: \"Required Title\" };\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const [text, setText] = useState(\"\"); //state-variable\n  const handleUPclick = () => {\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Converted to UpperCase !!\", \"success\");\n  };\n  const handleOnChange = (event) => {\n    setText(event.target.value);\n  };\n  const handleLOWclick = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n    props.showAlert(\"Converted to lowercase !!\", \"success\");\n  };\n  const handleClearText = () => {\n    let newText = \"\";\n    setText(newText);\n    props.showAlert(\"Text Has Been Cleared\", \"success\");\n  };\n  let style2 = {\n    backgroundColor: \"transparent\",\n    borderRadius: \"25px\",\n    color: \"white\",\n    borderColor: \"cyan\",\n  };\n  return (\n    <>\n      <div\n        className=\"container\"\n        style={{\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\n        }}\n      >\n        <h1 className=\"text-center\">{props.heading}</h1>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control text-center\"\n            id=\"myBox\"\n            style={style2}\n            value={text}\n            onChange={handleOnChange}\n            style={{\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\n            }}\n            rows=\"8\"\n          ></textarea>\n        </div>\n        <div id=\"buttons\">\n          <button\n            className=\"btn btn-primary mx-2\"\n            id=\"btn-bhsra1\"\n            onClick={handleUPclick}\n          >\n            Convert to UPPERCASE\n          </button>\n          <button\n            className=\"btn btn-primary mx-2\"\n            id=\"btn-bhsra2\"\n            onClick={handleLOWclick}\n          >\n            Convert to lowecase\n          </button>\n          <button\n            className=\"btn btn-primary mx-2\"\n            id=\"btn-bhsra2\"\n            onClick={handleClearText}\n          >\n            Clear Text\n          </button>\n        </div>\n      </div>\n      <div\n        className=\"container my-3\"\n        style={{\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\n        }}\n      >\n        <h2 className=\"text-center mt-10\">Your Text Summary</h2>\n        <p className=\"text-center\">\n          {text.split(\" \").length} words and {text.length} characters\n        </p>\n        <p className=\"text-center\">\n          {0.008 * text.split(\" \").length} Minutes needed to read.\n        </p>\n        <h2 className=\"text-center mt-10\">PREVIEW OF YOUR GIVEN TEXT</h2>\n        <p className=\"text-center\">\n          {text.length > 0 ? text : \"Enter Some Text Above To Preview Here\"}\n        </p>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nfunction Alert(props) {\n  const capitalize = (word) => {\n    const lower = word.toLowerCase();\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\n  };\n  return (\n    props.alert && (\n      <div\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\n        role=\"alert\"\n      >\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\n      </div>\n    )\n  );\n}\n\nexport default Alert;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\n// import Footer from \"./components/Footer\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark Mode Enabled\", \"success\");\n      document.title = \"TextUtils-Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode Enabled\", \"success\");\n      document.title = \"TextUtils-Light Mode\";\n    }\n  };\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm\n                heading=\"Enter a text to analyse below\"\n                mode={mode}\n                showAlert={showAlert}\n              />\n            </Route>\n          </Switch>\n          {/* <About/> */}\n        </div>\n        {/* <hr className=\"line\" />\n      <div className=\"footer\">\n        <Footer />\n      </div> */}\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}