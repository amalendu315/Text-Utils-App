{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","toggleMode","class","htmlFor","defaultProps","TextForm","useState","text","setText","style","color","heading","backgroundColor","borderRadius","borderColor","value","onChange","event","target","newText","toUpperCase","showAlert","toLowerCase","split","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0NAGe,SAASA,EAAOC,GAC7B,OACE,qBACEC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MADtE,SAGE,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SACGH,EAAMI,QAET,wBACEH,UAAU,iBACVI,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,qBAAIL,UAAU,kCAAd,UACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,oBAIF,oBAAIF,UAAU,WAAd,SACE,mBAAGA,UAAU,WAAWE,KAAK,IAA7B,SACGH,EAAMO,iBAeb,sBACEN,UAAS,sCACQ,UAAfD,EAAME,KAAmB,OAAS,SAFtC,UAKE,uBACED,UAAU,mBACVI,KAAK,WACLC,GAAG,yBACHE,QAASR,EAAMS,aAEjB,uBAAOC,MAAM,mBAAmBC,QAAQ,yBAAxC,wCAcZZ,EAAOa,aAAe,CAAEL,UAAW,WAAYH,MAAO,kB,WCtEvC,SAASS,EAASb,GAAQ,IAAD,EACtC,EAAwBc,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAyBA,OACE,qCACE,sBACEf,UAAU,YACVgB,MAAO,CACLC,MAAsB,SAAflB,EAAME,KAAkB,QAAU,SAH7C,UAME,oBAAID,UAAU,cAAd,SAA6BD,EAAMmB,UACnC,qBAAKlB,UAAU,OAAf,SACE,6BACEA,UAAU,2BACVK,GAAG,QACHW,MAnBG,CACXG,gBAAiB,cACjBC,aAAc,OACdH,MAAO,QACPI,YAAa,QAgBLC,MAAOR,EACPS,SAlCa,SAACC,GACtBT,EAAQS,EAAMC,OAAOH,SA4Bf,sBAMS,CACLH,gBAAgC,SAAfpB,EAAME,KAAkB,OAAS,QAClDgB,MAAsB,SAAflB,EAAME,KAAkB,QAAU,UAR7C,qBAUO,KAVP,MAaF,sBAAKI,GAAG,UAAR,UACE,wBACEL,UAAU,uBACVK,GAAG,aACHE,QAnDY,WACpB,IAAImB,EAAUZ,EAAKa,cACnBZ,EAAQW,GACR3B,EAAM6B,UAAU,4BAA6B,YA6CvC,kCAOA,wBACE5B,UAAU,uBACVK,GAAG,aACHE,QAlDa,WACrB,IAAImB,EAAUZ,EAAKe,cACnBd,EAAQW,GACR3B,EAAM6B,UAAU,4BAA6B,YA4CvC,iCAOA,wBACE5B,UAAU,uBACVK,GAAG,aACHE,QApDc,WAEtBQ,EADc,IAEdhB,EAAM6B,UAAU,wBAAyB,YA8CnC,8BASJ,sBACE5B,UAAU,iBACVgB,MAAO,CACLC,MAAsB,SAAflB,EAAME,KAAkB,QAAU,SAH7C,UAME,oBAAID,UAAU,oBAAd,+BACA,oBAAGA,UAAU,cAAb,UACGc,EAAKgB,MAAM,KAAKC,OADnB,cACsCjB,EAAKiB,OAD3C,iBAGA,oBAAG/B,UAAU,cAAb,UACG,KAAQc,EAAKgB,MAAM,KAAKC,OAD3B,8BAGA,oBAAI/B,UAAU,oBAAd,wCACA,mBAAGA,UAAU,cAAb,SACGc,EAAKiB,OAAS,EAAIjB,EAAO,gDCvErBkB,MAjBf,SAAejC,GAKb,OACEA,EAAMkC,OACJ,sBACEjC,UAAS,sBAAiBD,EAAMkC,MAAM7B,KAA7B,gCACT8B,KAAK,QAFP,UAIE,iCAVa,SAACC,GAClB,IAAMC,EAAQD,EAAKN,cACnB,OAAOO,EAAMC,OAAO,GAAGV,cAAgBS,EAAME,MAAM,GAQtCC,CAAWxC,EAAMkC,MAAM7B,QAJlC,MAIqDL,EAAMkC,MAAMO,QCsCxDC,MA3Cf,WACE,MAAwB5B,mBAAS,SAAjC,mBAAOZ,EAAP,KAAayC,EAAb,KACA,EAA0B7B,mBAAS,MAAnC,mBAAOoB,EAAP,KAAcU,EAAd,KACMf,EAAY,SAACgB,EAASxC,GAC1BuC,EAAS,CACPH,IAAKI,EACLxC,KAAMA,IAERyC,YAAW,WACTF,EAAS,QACR,OAaL,OACE,sBAAK3C,UAAU,aAAf,UACE,cAACF,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAMO,WAbvB,WACJ,UAATP,GACFyC,EAAQ,QACRI,SAASC,KAAK/B,MAAMG,gBAAkB,OACtCS,EAAU,oBAAqB,aAE/Bc,EAAQ,SACRI,SAASC,KAAK/B,MAAMG,gBAAkB,QACtCS,EAAU,qBAAsB,eAMhC,cAAC,EAAD,CAAOK,MAAOA,IACd,qBAAKjC,UAAU,iBAAf,SACE,cAACY,EAAD,CACEM,QAAQ,gCACRjB,KAAMA,EACN2B,UAAWA,UC3BNoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAM1BZ,M","file":"static/js/main.7b073a82.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"/\">\n          {props.title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\n                Home\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/\">\n                {props.aboutText}\n              </a>\n            </li>\n          </ul>\n          {/* <form className=\"d-flex\">\n            <input\n              className=\"form-control me-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button className=\"btn btn-outline-success\" type=\"submit\">\n              Search\n            </button>\n          </form> */}\n          <div\n            className={`form-check form-switch text-${\n              props.mode === \"light\" ? \"dark\" : \"light\"\n            }`}\n          >\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              id=\"flexSwitchCheckDefault\"\n              onClick={props.toggleMode}\n            />\n            <label class=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\n              Enable DarkMode\n            </label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n  aboutText: PropTypes.string.isRequired,\n};\nNavbar.defaultProps = { aboutText: \"About Us\", title: \"Required Title\" };\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const [text, setText] = useState(\"\"); //state-variable\n  const handleUPclick = () => {\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Converted to UpperCase !!\", \"success\");\n  };\n  const handleOnChange = (event) => {\n    setText(event.target.value);\n  };\n  const handleLOWclick = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n    props.showAlert(\"Converted to lowercase !!\", \"success\");\n  };\n  const handleClearText = () => {\n    let newText = \"\";\n    setText(newText);\n    props.showAlert(\"Text Has Been Cleared\", \"success\");\n  };\n  let style2 = {\n    backgroundColor: \"transparent\",\n    borderRadius: \"25px\",\n    color: \"white\",\n    borderColor: \"cyan\",\n  };\n  return (\n    <>\n      <div\n        className=\"container\"\n        style={{\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\n        }}\n      >\n        <h1 className=\"text-center\">{props.heading}</h1>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control text-center\"\n            id=\"myBox\"\n            style={style2}\n            value={text}\n            onChange={handleOnChange}\n            style={{\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\n            }}\n            rows=\"8\"\n          ></textarea>\n        </div>\n        <div id=\"buttons\">\n          <button\n            className=\"btn btn-primary mx-2\"\n            id=\"btn-bhsra1\"\n            onClick={handleUPclick}\n          >\n            Convert to UPPERCASE\n          </button>\n          <button\n            className=\"btn btn-primary mx-2\"\n            id=\"btn-bhsra2\"\n            onClick={handleLOWclick}\n          >\n            Convert to lowecase\n          </button>\n          <button\n            className=\"btn btn-primary mx-2\"\n            id=\"btn-bhsra2\"\n            onClick={handleClearText}\n          >\n            Clear Text\n          </button>\n        </div>\n      </div>\n      <div\n        className=\"container my-3\"\n        style={{\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\n        }}\n      >\n        <h2 className=\"text-center mt-10\">Your Text Summary</h2>\n        <p className=\"text-center\">\n          {text.split(\" \").length} words and {text.length} characters\n        </p>\n        <p className=\"text-center\">\n          {0.008 * text.split(\" \").length} Minutes needed to read.\n        </p>\n        <h2 className=\"text-center mt-10\">PREVIEW OF YOUR GIVEN TEXT</h2>\n        <p className=\"text-center\">\n          {text.length > 0 ? text : \"Enter Some Text Above To Preview Here\"}\n        </p>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nfunction Alert(props) {\n  const capitalize = (word) => {\n    const lower = word.toLowerCase();\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\n  };\n  return (\n    props.alert && (\n      <div\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\n        role=\"alert\"\n      >\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\n      </div>\n    )\n  );\n}\n\nexport default Alert;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n// import About from './components/About'\n// import Footer from \"./components/Footer\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark Mode Enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode Enabled\", \"success\");\n    }\n  };\n  return (\n    <div className=\"body_class\">\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <TextForm\n          heading=\"Enter a text to analyse below\"\n          mode={mode}\n          showAlert={showAlert}\n        />\n      </div>\n      {/* <About/> */}\n      {/* <hr className=\"line\" />\n      <div className=\"footer\">\n        <Footer />\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}